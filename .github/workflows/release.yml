name: release

concurrency:
  group: release-${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - '**/v[0-9]+.[0-9]+.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  generate:
    runs-on: ubuntu-latest
    name: Generate
    outputs:
      crate: ${{ steps.parse-ref.outputs.crate }}
      version: ${{ steps.parse-ref.outputs.version }}
    steps:
      - id: parse-ref
        run: |
          echo "CRATE=$(cut -d/ -f1 <<<"${GITHUB_REF#refs/*/}")" >> $GITHUB_OUTPUT
          echo "VERSION=$(cut -d/ -f2 <<<"${GITHUB_REF#refs/*/}")" >> $GITHUB_OUTPUT

  build:
    needs:
      - generate
    strategy:
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: Swatinem/rust-cache@v2
      - name: "check cgroup version"
        run: "mount | grep cgroup"
      - uses: actions/checkout@v3
      - name: Install rust
        run: |
          set -e
          toolchain="$(grep "ARG RUST_VERSION" Dockerfile | cut -d = -f2)"
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${toolchain:-stable}
      - name: Setup WasmEdge build env
        if: ${{ contains('wasmedge', needs.generate.outputs.crate ) }}
        run: |
          curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- --version=0.11.2
          echo "LD_LIBRARY_PATH=$HOME/.wasmedge/lib" >> $GITHUB_ENV
      - name: Build
        run: cargo build --verbose --package ${{ needs.generate.outputs.crate }}
      - name: Test
        run: cargo test --verbose --package ${{ needs.generate.outputs.crate }}

  release:
    permissions:
      contents: write
    needs:
      - build
      - generate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup buildx
        run: docker buildx create --use
      - name: build binaries
        run: docker buildx bake --set *.cache-from=type=gha --set *.cache-to=type=gha release-tars
        env:
          CRATE: ${{ needs.generate.outputs.crate }}
      - name: upload binary as GitHub artifact
        uses: actions/upload-artifact@v3
        with:
          path: release/
          name: ${{ needs.generate.outputs.crate }}-${{ needs.generate.outputs.version }}
      - name: Create release
        run: |
          gh release create ${{ github.ref }} --generate-notes --prerelease
          for i in release/*/*; do
            gh release upload ${RELEASE_NAME} $i
          done
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_NAME: ${{ needs.generate.outputs.crate }}/${{ needs.generate.outputs.version }}
